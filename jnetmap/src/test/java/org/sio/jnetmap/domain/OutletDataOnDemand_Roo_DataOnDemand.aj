// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.sio.jnetmap.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.sio.jnetmap.domain.BandDataOnDemand;
import org.sio.jnetmap.domain.Outlet;
import org.sio.jnetmap.domain.OutletDataOnDemand;
import org.sio.jnetmap.domain.RoomDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OutletDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OutletDataOnDemand: @Component;
    
    private Random OutletDataOnDemand.rnd = new SecureRandom();
    
    private List<Outlet> OutletDataOnDemand.data;
    
    @Autowired
    private BandDataOnDemand OutletDataOnDemand.bandDataOnDemand;
    
    @Autowired
    private RoomDataOnDemand OutletDataOnDemand.roomDataOnDemand;
    
    public Outlet OutletDataOnDemand.getNewTransientOutlet(int index) {
        Outlet obj = new Outlet();
        setNumOutlet(obj, index);
        setPortOutlet(obj, index);
        return obj;
    }
    
    public void OutletDataOnDemand.setNumOutlet(Outlet obj, int index) {
        String numOutlet = "numOutlet_" + index;
        if (numOutlet.length() > 30) {
            numOutlet = numOutlet.substring(0, 30);
        }
        obj.setNumOutlet(numOutlet);
    }
    
    public void OutletDataOnDemand.setPortOutlet(Outlet obj, int index) {
        int portOutlet = index;
        obj.setPortOutlet(portOutlet);
    }
    
    public Outlet OutletDataOnDemand.getSpecificOutlet(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Outlet obj = data.get(index);
        Long id = obj.getId();
        return Outlet.findOutlet(id);
    }
    
    public Outlet OutletDataOnDemand.getRandomOutlet() {
        init();
        Outlet obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Outlet.findOutlet(id);
    }
    
    public boolean OutletDataOnDemand.modifyOutlet(Outlet obj) {
        return false;
    }
    
    public void OutletDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Outlet.findOutletEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Outlet' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Outlet>();
        for (int i = 0; i < 10; i++) {
            Outlet obj = getNewTransientOutlet(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
